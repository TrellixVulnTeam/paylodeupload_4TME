"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-use-before-define */
/* eslint-disable no-await-in-loop */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-use-before-define */
const graphql_type_json_1 = require("graphql-type-json");
const graphql_1 = require("graphql");
const graphql_scalars_1 = require("graphql-scalars");
const types_1 = require("../../fields/config/types");
const formatName_1 = __importDefault(require("../utilities/formatName"));
const combineParentName_1 = __importDefault(require("../utilities/combineParentName"));
const withNullableType_1 = __importDefault(require("./withNullableType"));
const formatLabels_1 = require("../../utilities/formatLabels");
const relationshipPromise_1 = __importDefault(require("../../fields/richText/relationshipPromise"));
const formatOptions_1 = __importDefault(require("../utilities/formatOptions"));
function buildObjectType(name, fields, parentName, baseFields = {}) {
    const recursiveBuildObjectType = buildObjectType.bind(this);
    const fieldToSchemaMap = {
        number: (field) => ({ type: (0, withNullableType_1.default)(field, graphql_1.GraphQLFloat) }),
        text: (field) => ({ type: (0, withNullableType_1.default)(field, graphql_1.GraphQLString) }),
        email: (field) => ({ type: (0, withNullableType_1.default)(field, graphql_scalars_1.EmailAddressResolver) }),
        textarea: (field) => ({ type: (0, withNullableType_1.default)(field, graphql_1.GraphQLString) }),
        code: (field) => ({ type: (0, withNullableType_1.default)(field, graphql_1.GraphQLString) }),
        date: (field) => ({ type: (0, withNullableType_1.default)(field, graphql_scalars_1.DateTimeResolver) }),
        point: (field) => ({ type: (0, withNullableType_1.default)(field, new graphql_1.GraphQLList(graphql_1.GraphQLFloat)) }),
        richText: (field) => ({
            type: (0, withNullableType_1.default)(field, graphql_type_json_1.GraphQLJSON),
            async resolve(parent, args, context) {
                if (args.depth > 0) {
                    await (0, relationshipPromise_1.default)({
                        req: context.req,
                        siblingDoc: parent,
                        depth: args.depth,
                        field,
                        showHiddenFields: false,
                    });
                }
                return parent[field.name];
            },
            args: {
                depth: {
                    type: graphql_1.GraphQLInt,
                },
            },
        }),
        upload: (field) => {
            const { relationTo, label } = field;
            const uploadName = (0, combineParentName_1.default)(parentName, label === false ? (0, formatLabels_1.toWords)(field.name, true) : label);
            // If the relationshipType is undefined at this point,
            // it can be assumed that this blockType can have a relationship
            // to itself. Therefore, we set the relationshipType equal to the blockType
            // that is currently being created.
            const type = this.collections[relationTo].graphQL.type || newlyCreatedBlockType;
            const uploadArgs = {};
            if (this.config.localization) {
                uploadArgs.locale = {
                    type: this.types.localeInputType,
                };
                uploadArgs.fallbackLocale = {
                    type: this.types.fallbackLocaleInputType,
                };
            }
            const relatedCollectionSlug = field.relationTo;
            const relatedCollection = this.collections[relatedCollectionSlug];
            const { find } = this.operations.collections;
            const upload = {
                args: uploadArgs,
                type,
                extensions: { complexity: 20 },
                async resolve(parent, args, context) {
                    const value = parent[field.name];
                    const locale = args.locale || context.req.locale;
                    const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale;
                    let id = value;
                    if (id) {
                        id = id.toString();
                        const relatedDocumentQuery = {
                            collection: relatedCollection,
                            where: {
                                ...(args.where || {}),
                                _id: {
                                    equals: id,
                                },
                            },
                            res: context.res,
                            req: {
                                ...context.req,
                                locale,
                                fallbackLocale,
                            },
                            depth: 0,
                            pagination: false,
                        };
                        const relatedDocument = await find(relatedDocumentQuery);
                        if (relatedDocument.docs[0])
                            return relatedDocument.docs[0];
                        return null;
                    }
                    return null;
                },
            };
            const whereFields = this.collections[relationTo].config.fields;
            upload.args.where = {
                type: this.buildWhereInputType(uploadName, whereFields, uploadName),
            };
            return upload;
        },
        radio: (field) => ({
            type: (0, withNullableType_1.default)(field, new graphql_1.GraphQLEnumType({
                name: (0, combineParentName_1.default)(parentName, field.name),
                values: (0, formatOptions_1.default)(field),
            })),
        }),
        checkbox: (field) => ({ type: (0, withNullableType_1.default)(field, graphql_1.GraphQLBoolean) }),
        select: (field) => {
            const fullName = (0, combineParentName_1.default)(parentName, field.name);
            let type = new graphql_1.GraphQLEnumType({
                name: fullName,
                values: (0, formatOptions_1.default)(field),
            });
            type = field.hasMany ? new graphql_1.GraphQLList(type) : type;
            type = (0, withNullableType_1.default)(field, type);
            return { type };
        },
        relationship: (field) => {
            const { relationTo, label } = field;
            const isRelatedToManyCollections = Array.isArray(relationTo);
            const hasManyValues = field.hasMany;
            const relationshipName = (0, combineParentName_1.default)(parentName, label === false ? (0, formatLabels_1.toWords)(field.name, true) : label);
            let type;
            let relationToType = null;
            if (Array.isArray(relationTo)) {
                relationToType = new graphql_1.GraphQLEnumType({
                    name: `${relationshipName}_RelationTo`,
                    values: relationTo.reduce((relations, relation) => ({
                        ...relations,
                        [(0, formatName_1.default)(relation)]: {
                            value: relation,
                        },
                    }), {}),
                });
                const types = relationTo.map((relation) => this.collections[relation].graphQL.type);
                type = new graphql_1.GraphQLObjectType({
                    name: `${relationshipName}_Relationship`,
                    fields: {
                        relationTo: {
                            type: relationToType,
                        },
                        value: {
                            type: new graphql_1.GraphQLUnionType({
                                name: relationshipName,
                                types,
                                async resolveType(data, { req: { payload } }) {
                                    return payload.collections[data.collection].graphQL.type.name;
                                },
                            }),
                        },
                    },
                });
            }
            else {
                ({ type } = this.collections[relationTo].graphQL);
            }
            // If the relationshipType is undefined at this point,
            // it can be assumed that this blockType can have a relationship
            // to itself. Therefore, we set the relationshipType equal to the blockType
            // that is currently being created.
            type = type || newlyCreatedBlockType;
            const relationshipArgs = {};
            if (this.config.localization) {
                relationshipArgs.locale = {
                    type: this.types.localeInputType,
                };
                relationshipArgs.fallbackLocale = {
                    type: this.types.fallbackLocaleInputType,
                };
            }
            const { collections, operations: { collections: { find, }, }, } = this;
            const relationship = {
                args: relationshipArgs,
                type: hasManyValues ? new graphql_1.GraphQLList(type) : type,
                extensions: { complexity: 10 },
                async resolve(parent, args, context) {
                    const value = parent[field.name];
                    const locale = args.locale || context.req.locale;
                    const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale;
                    let relatedCollectionSlug = field.relationTo;
                    if (hasManyValues) {
                        const results = [];
                        const resultPromises = [];
                        const createPopulationPromise = async (relatedDoc, i) => {
                            let id = relatedDoc;
                            let collectionSlug = field.relationTo;
                            if (isRelatedToManyCollections) {
                                collectionSlug = relatedDoc.relationTo;
                                id = relatedDoc.value;
                            }
                            const result = await find({
                                collection: collections[collectionSlug],
                                where: {
                                    ...(args.where || {}),
                                    _id: {
                                        equals: id,
                                    },
                                },
                                res: context.res,
                                req: {
                                    ...context.req,
                                    locale,
                                    fallbackLocale,
                                },
                                depth: 0,
                                pagination: false,
                            });
                            if (result.docs.length === 1) {
                                if (isRelatedToManyCollections) {
                                    results[i] = {
                                        relationTo: collectionSlug,
                                        value: {
                                            ...result.docs[0],
                                            collection: collectionSlug,
                                        },
                                    };
                                }
                                else {
                                    [results[i]] = result.docs;
                                }
                            }
                        };
                        if (value) {
                            value.forEach((relatedDoc, i) => {
                                resultPromises.push(createPopulationPromise(relatedDoc, i));
                            });
                        }
                        await Promise.all(resultPromises);
                        return results;
                    }
                    let id = value;
                    if (isRelatedToManyCollections && value) {
                        id = value.value;
                        relatedCollectionSlug = value.relationTo;
                    }
                    if (id) {
                        id = id.toString();
                        const relatedDocumentQuery = {
                            collection: collections[relatedCollectionSlug],
                            where: {
                                ...(args.where || {}),
                                id: {
                                    equals: id,
                                },
                            },
                            ...context,
                            depth: 0,
                        };
                        if (args.page)
                            relatedDocumentQuery.paginate.page = args.page;
                        if (args.limit)
                            relatedDocumentQuery.paginate.limit = args.limit;
                        const relatedDocument = await find(relatedDocumentQuery);
                        if (relatedDocument.docs[0]) {
                            if (isRelatedToManyCollections) {
                                return {
                                    relationTo: relatedCollectionSlug,
                                    value: {
                                        ...relatedDocument.docs[0],
                                        collection: relatedCollectionSlug,
                                    },
                                };
                            }
                            return relatedDocument.docs[0];
                        }
                        return null;
                    }
                    return null;
                },
            };
            if (hasManyValues) {
                relationship.args.page = { type: graphql_1.GraphQLInt };
                relationship.args.limit = { type: graphql_1.GraphQLInt };
            }
            if (Array.isArray(relationTo)) {
                const relatedCollectionFields = relationTo.reduce((allFields, relation) => [
                    ...allFields,
                    ...collections[relation].config.fields,
                ], []);
                relationship.args.where = {
                    type: this.buildWhereInputType(relationshipName, relatedCollectionFields, relationshipName),
                };
            }
            else {
                const whereFields = this.collections[relationTo].config.fields;
                relationship.args.where = {
                    type: this.buildWhereInputType(relationshipName, whereFields, relationshipName),
                };
            }
            return relationship;
        },
        array: (field) => {
            const fullName = (0, combineParentName_1.default)(parentName, field.label === false ? (0, formatLabels_1.toWords)(field.name, true) : field.label);
            let type = recursiveBuildObjectType(fullName, field.fields, fullName);
            type = new graphql_1.GraphQLList((0, withNullableType_1.default)(field, type));
            return { type };
        },
        group: (field) => {
            const fullName = (0, combineParentName_1.default)(parentName, field.label === false ? (0, formatLabels_1.toWords)(field.name, true) : field.label);
            const type = recursiveBuildObjectType(fullName, field.fields, fullName);
            return { type };
        },
        blocks: (field) => {
            const blockTypes = field.blocks.map((block) => {
                this.buildBlockType(block);
                return this.types.blockTypes[block.slug];
            });
            const fullName = (0, combineParentName_1.default)(parentName, field.label === false ? (0, formatLabels_1.toWords)(field.name, true) : field.label);
            const type = new graphql_1.GraphQLList(new graphql_1.GraphQLUnionType({
                name: fullName,
                types: blockTypes,
                resolveType: (data) => this.types.blockTypes[data.blockType].name,
            }));
            return { type };
        },
        row: (field) => field.fields.reduce((subFieldSchema, subField) => {
            const buildSchemaType = fieldToSchemaMap[subField.type];
            if (!(0, types_1.fieldIsPresentationalOnly)(subField) && buildSchemaType) {
                return {
                    ...subFieldSchema,
                    [(0, formatName_1.default)(subField.name)]: buildSchemaType(subField),
                };
            }
            return subFieldSchema;
        }, {}),
    };
    const objectSchema = {
        name,
        fields: () => fields.reduce((schema, field) => {
            if (!(0, types_1.fieldIsPresentationalOnly)(field) && !field.hidden) {
                const fieldSchema = fieldToSchemaMap[field.type];
                if (fieldSchema) {
                    if ((0, types_1.fieldAffectsData)(field)) {
                        return {
                            ...schema,
                            [(0, formatName_1.default)(field.name)]: fieldSchema(field),
                        };
                    }
                    return {
                        ...schema,
                        ...fieldSchema(field),
                    };
                }
            }
            return schema;
        }, baseFields),
    };
    const newlyCreatedBlockType = new graphql_1.GraphQLObjectType(objectSchema);
    return newlyCreatedBlockType;
}
exports.default = buildObjectType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRPYmplY3RUeXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2dyYXBocWwvc2NoZW1hL2J1aWxkT2JqZWN0VHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUE0RDtBQUM1RCxxQ0FBcUM7QUFDckMseUNBQXlDO0FBQ3pDLHlDQUF5QztBQUN6Qyx5REFBZ0Q7QUFDaEQscUNBU2lCO0FBQ2pCLHFEQUF5RTtBQUN6RSxxREFBeVQ7QUFDelQseUVBQWlEO0FBQ2pELHVGQUErRDtBQUMvRCwwRUFBa0Q7QUFFbEQsK0RBQXVEO0FBQ3ZELG9HQUEwRjtBQUMxRiwrRUFBdUQ7QUFjdkQsU0FBUyxlQUFlLENBQUMsSUFBWSxFQUFFLE1BQWUsRUFBRSxVQUFrQixFQUFFLGFBQXlCLEVBQUU7SUFDckcsTUFBTSx3QkFBd0IsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTVELE1BQU0sZ0JBQWdCLEdBQUc7UUFDdkIsTUFBTSxFQUFFLENBQUMsS0FBa0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFBLDBCQUFnQixFQUFDLEtBQUssRUFBRSxzQkFBWSxDQUFDLEVBQUUsQ0FBQztRQUNqRixJQUFJLEVBQUUsQ0FBQyxLQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUEsMEJBQWdCLEVBQUMsS0FBSyxFQUFFLHVCQUFhLENBQUMsRUFBRSxDQUFDO1FBQzlFLEtBQUssRUFBRSxDQUFDLEtBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBQSwwQkFBZ0IsRUFBQyxLQUFLLEVBQUUsc0NBQW9CLENBQUMsRUFBRSxDQUFDO1FBQ3ZGLFFBQVEsRUFBRSxDQUFDLEtBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBQSwwQkFBZ0IsRUFBQyxLQUFLLEVBQUUsdUJBQWEsQ0FB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